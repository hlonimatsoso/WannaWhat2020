@page "/profile"
@inherits ProfileBase

@using System.Security.Claims

@using Microsoft.AspNetCore.Components.Authorization


@inject AuthenticationStateProvider AuthenticationStateProvider

<MatTabGroup>
    <MatTab Label="Personal Info">
        Personal Info
    </MatTab>
    <MatTab Label="Personality">
        Personality
    </MatTab>
    <MatTab Label="Interests">
        Interests
    </MatTab>
    <MatTab Label="Hobbies">
        Hobbies
    </MatTab>
    <MatTab Label="General">
        Religion etc
    </MatTab>
    <MatTab Label="Looking For">
        Looking For
    </MatTab>
    <MatTab Label="Claims">
        <section class="mb-4">

            <h1 class="mb-4">Authentication State Provider</h1>

            <h2 class="mb-4">Hello, @this.AuthenticationStateProviderUser.Identity.Name!</h2>

            <table class="table">
                <thead>
                    <tr>
                        <th>Key</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var claim in this.AuthenticationStateProviderUser.Claims)
                    {
                        <tr>
                            <td>@claim.Type</td>
                            <td>@claim.Value</td>
                        </tr>
                    }
                </tbody>
            </table>

        </section>
    </MatTab>
</MatTabGroup>


@code {
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private ClaimsPrincipal AuthenticationStateUser { get; set; }
    private ClaimsPrincipal AuthenticationStateProviderUser { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState authenticationState;

        authenticationState = await authenticationStateTask;
        this.AuthenticationStateUser = authenticationState.User;

        authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        this.AuthenticationStateProviderUser = authenticationState.User;
    }
}
